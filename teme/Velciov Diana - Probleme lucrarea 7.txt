Velciov Diana 7.2


EXERCITIUL 1

> (defun reuniune (L1 L2)
  (do ((L L1 (cdr L)) (LL L2 (if (not (member (car L) LL)) (cons (car L) LL) LL)))
  ((null L) LL)
))
REUNIUNE
> (reuniune '(1 2 3) '(1 4 5))
(3 2 1 4 5)
> (reuniune '(1 2 3) '(1 2 3))
(1 2 3)
> (reuniune '(1 2 3) '(4 5))
(3 2 1 4 5)


> (defun intersectie (L1 L2)
  (do ((L L1 (cdr L)) (LL '() (if (member (car L) L2) (cons (car L) LL) LL)))
  ((null L) LL)
))
INTERSECTIE
> (intersectie '(1 2 3) '(1 2 3))
(3 2 1)
> (intersectie '(1 2 3) '(1 4 5))
(1)
> (intersectie '(1 2 3) '(1 2 4))
(2 1)


> (defun diferenta (L1 L2)
  (do ((L L1 (cdr L)) (LL '() (if (not (member (car L) L2)) (cons (car L) LL) LL)))
  ((null L) LL)
))
DIFERENTA
> (diferenta '(1 2 3) '(2 3))
(1)
> (diferenta '(1 2 3) '(3 4))
(2 1)
> (diferenta '(3 4) '(1 2 3))
(4)
> (diferenta '(2 3) '(1 2 3))
NIL


> (defun egalitate (L1 L2)
  (do ((L L1 (cdr L)) (LL '() (if (not (member (car L) L2)) nil T)))
  ((null L) (if (not (equal (length L1) (length L2))) nil LL))))
EGALITATE
> (egalitate '(1 2 3) '(1 2 4))
NIL
> (egalitate '(1 2 3) '(1 2))
NIL
> (egalitate '(1 2) '(1 2 4))
NIL
> (egalitate '(1 2 3) '(1 2 3))
T
> (egalitate '(1 2 3) '(3 1 2))
T


> (defun produsul_cartezian (L1 L2)
  (do ( (L L1 (cdr L)) )
  ((null L) '())
  (do ( (LL L2 (cdr LL)) ) 
  ((null LL) '())
  (format t "(~a ~a)\n" (car L) (car LL))
)))
PRODUSUL_CARTEZIAN
> (produsul_cartezian '(1 2 3) '(4 5))
(1 4)
(1 5)
(2 4)
(2 5)
(3 4)
(3 5)
> (produsul_cartezian '(1 2 3) '(1 4 5))
(1 1)
(1 4)
(1 5)
(2 1)
(2 4)
(2 5)
(3 1)
(3 4)
(3 5)


EXERCITIUL 2

> (defun pozpar (lista)
  (do ((l lista (cdr l)) (poz 0 (+ 1 poz)) (x '() (if (equal 0 (rem poz 2)) (append x (list (car l)))  x)))
  ((null l) x)
))
POZPAR
> (pozpar '(1 2 3 4))
(1 3)
> (pozpar '(1 2 3 2 1))
(1 3 1)
