VELCIOV DIANA 7.2


EXERCITIUL 1

Sirul Fibonacci: 0 1 1 2 3 5 8 13 21 34 55 89
# let fibonacci n =
  let rec functie_auxiliara n y x =
  		if n<=1 then x
  		else functie_auxiliara (n-1) (x+y) y in
  functie_auxiliara n 1 0;;
val fibonacci : int -> int = <fun>
# fibonacci 1 ;;
- : int = 0
# fibonacci 2 ;;
- : int = 1
# fibonacci 3 ;;
- : int = 1
# fibonacci 4 ;;
- : int = 2
# fibonacci 5 ;;
- : int = 3
# fibonacci 6 ;;
- : int = 5
# fibonacci 7 ;;
- : int = 8
# fibonacci 10;;
- : int = 34


EXERCITIUL 2

# let geninterval s e =
  let rec functie_auxiliara s e l =
  		if s>e then l
  		else functie_auxiliara (s+1) e (l@(s::[])) in
  functie_auxiliara s e [];;
val geninterval : int -> int -> int list = <fun>
# geninterval 1 2;;
- : int list = [1; 2]
# geninterval 1 5;;
- : int list = [1; 2; 3; 4; 5]
# geninterval 10 19;;
- : int list = [10; 11; 12; 13; 14; 15; 16; 17; 18; 19]
# geninterval 10 10;;
- : int list = [10]


EXERCITIUL 3

# let my_not e = if e then false else true;;
val my_not : bool -> bool = <fun>
# my_not (1=1) ;;
- : bool = false
# my_not (1=2) ;;
- : bool = true
# my_not (1=10) ;;
- : bool = true
# my_not (10 > 1) ;;
- : bool = false
# my_not (1<=1) ;;
- : bool = false

# let toINT e = if e then 1 else 0;;
val toINT : bool -> int = <fun>
# let my_and e1 e2 = if ((toINT e1) + (toINT e2))=2 then true else false;;
val my_and : bool -> bool -> bool = <fun>
# my_and (1<2) (2<3);;
- : bool = true
# my_and (1==2) (2<=3);;
- : bool = false
# my_and (1<2) (2<1);;
- : bool = false
# my_and (1==2) (-1>2);;
- : bool = false

let toINT e = if e then 1 else 0;;
val toINT : bool -> int = <fun>
let my_or e1 e2 = if ((toINT e1) + (toINT e2))=0 then false else true;;
val my_or : bool -> bool -> bool = <fun>
# my_or (1<2) (2<3);;
- : bool = true
# my_or (1==2) (2<=3);;
- : bool = true
# my_or (1<2) (2<1);;
- : bool = true
# my_or (1==2) (-1>2);;
- : bool = false


EXERCITIUL 4

# let digits n =
  let rec functie_auxiliara n l =
  		if n=0 then l
  		else functie_auxiliara (n/10) ((n mod 10)::l) in
  functie_auxiliara n [];;
val digits : int -> int list = <fun>
# digits 123;;
- : int list = [1; 2; 3]
# digits 10;;
- : int list = [1; 0]
# digits 102930490 ;;
- : int list = [1; 0; 2; 9; 3; 0; 4; 9; 0]


EXERCITIUL 5

# let maxim l =
  let rec functie_auxiliara maxi l = match l with
      []->maxi
    |h::t->functie_auxiliara (max maxi h) t
  in functie_auxiliara 0 l;;
val maxim : int list -> int = <fun>
# maxim [2;3;1;5;3;2;0;9;7;5];;
- : int = 9
# maxim [4;3;2;1] ;;
- : int = 4
# maxim [1;2;3;4];;
- : int = 4


EXERCITIUL 6

# let rec cmmdc x y = if y=0 then x else cmmdc y (x mod y);;
val cmmdc : int -> int -> int = <fun>
# cmmdc 2 10;;
- : int = 2
# cmmdc 10 200;;
- : int = 10
# cmmdc 2 17 ;;
- : int = 1


EXERCITIUL 7

#let reverse l =
  let rec functie_auxiliara lfinala l = match l with
      []->lfinala
    |h::t->functie_auxiliara (h::lfinala) t in
  functie_auxiliara [] l;;
val reverse : 'a list -> 'a list = <fun>
# reverse [1;2;3;4;5] ;;
- : int list = [5; 4; 3; 2; 1]
# reverse [8;8;3;2;5;7;5;4;3;1;1] ;;
- : int list = [1; 1; 3; 4; 5; 7; 5; 2; 3; 8; 8]


EXERCITIUL 8

# let split list n =
  let rec aux i acc = function
    | [] -> List.rev acc, []
    | h :: t as l -> if i = 0 then List.rev acc, l
        else aux (i - 1) (h :: acc) t  in
  aux n [] list;;
val split : 'a list -> int -> 'a list * 'a list = <fun>
# let rotate_left list n =
  let len = List.length list in
  let n = if len = 0 then 0 else (n mod len + len) mod len in
  if n = 0 then list
  else let a, b = split list n in b @ a;;
val rotate_left : 'a list -> int -> 'a list = <fun>
# rotate_left [1;2;3;4] 1;;
- : int list = [2; 3; 4; 1]
# rotate_left [1;2;3;4] 2;;
- : int list = [3; 4; 1; 2]
# rotate_left [1;2;3;4] 3;;
- : int list = [4; 1; 2; 3]
# rotate_left [1;2;3;4] 4;;
- : int list = [1; 2; 3; 4]

# let rec last = function
  | [] -> assert false 
  | [x] -> x
  | x::xs -> last xs;;
val last : 'a list -> 'a = <fun>
# let rec init = function
  | [] -> []
  | [x] -> []
  | x::xs -> x::(init xs);;
val init : 'a list -> 'a list = <fun>
#let one_rot l = (last l)::(init l);;
val one_rot : 'a list -> 'a list = <fun>
# let rec rotate_right n l = 
  match n with 
  | 0 -> l
  | _ -> rotate_right (n-1) (one_rot l);;
val rotate_right : int -> 'a list -> 'a list = <fun>
# rotate_right 1 [1;2;3;4;5];;
- : int list = [5; 1; 2; 3; 4]
# rotate_right 2 [1;2;3;4;5];;
- : int list = [4; 5; 1; 2; 3]


EXERCITIUL 9

# let rec apply f a =
  function [] -> a
         |x::l -> apply f (f x a) l;;
val apply : ('a -> 'b -> 'b) -> 'b -> 'a list -> 'b = <fun>
# let u x y = x + y;;
val u : int -> int -> int = <fun>
# let f x y = 2*x + y;;
val f : int -> int -> int = <fun>
# apply u 0 [1;2;3;4];;
- : int = 10
# apply f 1 [1;2;3;4];;
- : int = 21

