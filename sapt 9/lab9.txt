1. Scrieţi o funcƫie FETCH (folosind ASSOC) care primeşte o cheie şi
o listă de asociaţii, iar dacă găseşte cheia va returna doar
valoarea ei. Dacă nu o găseşte va returna un mesaj corespunzător

> (fetch 'temperature '((temperature 100)
(pressure (120 60))
(pulse 72)))
100

> (defun fetch (cheie lista)
    (if (car(cdr (assoc cheie lista))) (car(cdr (assoc cheie lista))) 'Eroare!)
)
FETCH
> (fetch 'temperature '((temperatura 100)
(pressure (120 60))
(pulse 72)))
(EROARE!)

> (fetch 'temperature '((temperature 100)
(pressure (120 60))
(pulse 72)))
100

2. Presupunând că avem simboluri ce au proprietatea tata. Definiţi
procedura bunic ce primeşte un simbol şi returnează bunicul din
partea tatălui dacă este cunoscut, alftel nil.

//(setf (get (simbol) (proprietate de setat)) (valoare de setat))

> (defun bunic (simbol)
    (car (get (car (get simbol 'tata )) 'tata))
)
BUNIC

> (setf (get 'Ion 'tata) '(Gheorghe))
(GHEORGHE)
> (setf (get 'Gheorghe 'tata) '(Mishu))
(MISHU)

> (bunic 'Ion)
MISHU

3. Definiţi un macro define care defineşte o funcţie având sintaxa:
(define <nume functie> (<param 1> ... <param n>) <corp>)
Cu ajutorul macrou-lui definti apoi o functie, care va fi ulterior
apelata.

>(defmacro define(nume lista corp)
    `(defun, nume, lista, corp
    )
)
DEFINE

> (define f1 (a b) (* a b))
F1
> (f1 2 3)
6

> (define aduna (a b c d e f) (+ a b c d e f))
ADUNA
> (aduna 1 2 3 4 5 6)
21